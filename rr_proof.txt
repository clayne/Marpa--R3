Let me say that a grammar is Leo-ambiguous if it has right recursions
that, in the language of Leo 1991, produce non-deterministic reduction
paths of arbitrary length.  I believe I have a proof that any grammar
that is Leo-ambiguous is also ambiguous.

This is of particular interest with Marpa for pragmatic reasons.
Marpa modified Leo 1991 so that it only created Leo items for right
recursions.  My claimed proof implies that there is no unambiguous
grammar that is non-linear because of right recursions.  That further
implies that unambiguous grammars are non-linear for Marpa only if they
have unmarked middle recursions.

Let our notation for an Earley item be [dr, origin, x], where dr is
a dotted rule, and origin and x are locations in the input.  'origin'
is the origin location of the Earley item and 'x' is its current location.

Let

sf-a =>* sf-b

mean that sentential form sf-a left-derives sf-b in zero or more steps;
and let

sf-a =>*[A] sf-b

indicate that sentential form sf-a left-derives sf-b in zero or more
steps using derivation A.

Also, in derivations, let locations be shown in curly brackets, so that

<A> =>* {a} ... {b} <B> {c}

indicates a derivation whose origin is at location {a} in the input;
whose end is at location {c}; and where derivations from <B> must begin
at location {b}.

To avoid multiplying symbols pointlessly, I use ellipsis to indicate some
arbitrary sentential form.  No sentential forms indicated by ellipses
can be assumed to be equal to another.

Let me define "Leo-ambiguous" to mean that that a grammar allows a
right-recursive reduction path that contains an arbitrary number of
pairs of Earley items of the form:

E1 = [dr1, origin1, x]

E2 = [dr2, origin2, x]

dr1 = <rr1> ::= ... <dup>

dr2 = <rr2> ::= ... <dup>

where E1 and E2 are Earley items; dr1 and dr2 are dotted rules; <rr1>,
<rr2> and <dup> are right-recursive symbols; origin1, origin2 and x are
locations; and either dr1 != dr2 or origin1 != origin2.  Let me call a
pair of Earley items as specified above, a "Leo-ambiguous pair".

Without loss of generality, I assume the rules of dr1 and dr2 have no
properly nullable symbols and I ignore nulling symbols.  (Marpa rewrites
its grammars to eliminate proper nullables.)

Lemma:  If a context-free grammar, G, has a non-terminal which derives
a string of terminals in more than one way, then G is ambiguous.

The proof of the Lemma follows from the definition of context-free.

Theorem:  Every Leo-ambiguous grammar is ambiguous.

Let G be a context-free grammar.  Assume, for a reductio, that G is
unambiguous and Leo-ambiguous.

In a Leo-ambiguous right-recursive reduction path of arbitrary length,
at least one LHS must occur more than twice.  Call this LHS <dup>.
The reduction path must also contain at least two successive occurrences
of Leo-ambiguous pairs where <dup> is the post-dot symbol.  Call the dot
location of the first Leo-ambiguous pair in a succession, {a}.  Call the
dot location of the first Leo-ambiguous pair in a succession, {b}.

Then we have

<dup> =>*[A] {a} ... {b} <dup> =>* {a} w-a {b} w-dup-a

<dup> =>*[B] {a} ... {b} <dup> =>* {a} w-b {b} w-dup-b

where w-a, w-b, w-dup-a and w-dup-b are sentences.  Because w-a and w-b
are sentences between {a} and {b} in a series of Earley tables, we may
treat them as fixed and equal to each other:

w-a = w-b

G is context-free, <dup> =>* w-dup-a and <dup> =>* w-dup-b.  This allows
us to set

w-dup-a = w-dup-b

Combining the above, we have

w-a . w-dup-a = w-b . w-dup-b

And since, by the validity of the Earley items in the successive
Leo-ambiguous pairs, the last step of derivations A and B differ, I have
A != B.

But then <dup> =>* w-a . w-dup-a in at least two different ways.  By the
Lemma therefore, G is ambiguous.

QED.

Linearity of right-recursions in unambiguous grammars for Marpa follows
because a right-recursive path must contain an arbitrary number of
Leo-ambiguous pairs in order to go non-linear.
