# Copyright 2018 Jeffrey Kegler
# This file is part of Marpa::R3.  Marpa::R3 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R3 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R3.  If not, see
# http://www.gnu.org/licenses/.

=head1 NAME

Marpa::R3::External::Earleme - Details on input models and earlemes

=head1 TO DO

Copied verbatim from libmarpa doc.
Needs revision to apply to R3.

=head1 About this document

The alternative input models described in this document are an
advanced technique.
If you are starting out with Marpa, you
probably want to ignore this document.
If you are an experienced Marpa user,
it is still safe to ignore this document,
but you might find the possibilities it discusses
interesting.

=head1 The traditional model

In traditional Earley parsers, the concept of location is very simple.
Locations are numbered from 0 to I<n>, where I<n> is the length of
the input.
Every location has an Earley set, and vice versa.
Location 0 is the start location.
Every location after the start location has exactly one input token
associated with it.

Some applications
do not fit this traditional input model ---
natural language processing requires ambiguous tokens,
for example.
Libmarpa allows a wide variety of alternative input models.

This document assumes that the reader knows the concepts
behind Libmarpa's
alternative input models, either from the documentation
of a higher level interface, such as
C<Marpa::XS>,
C<Marpa::R2>,
or C<Marpa::R3>,
or from Marpa's
L<https://docs.google.com/file/d/0B9_mR_M2zOc4Ni1zSW5IYzk3TGc/edit?usp=sharing, theory document>.

As a reminder,
in Libmarpa a location is called a B<earleme>.
The number of an Earley set is the B<ID of the Earley set>,
or its B<ordinal>.
In the traditional model, the ordinal of an Earley set and
its earleme are always exactly the same, but in Libmarpa
they will be different.

=head1 The earleme variables

The important earleme variables are the current earleme, the furthest earleme
and the latest earleme.
The B<current earleme> is the earleme that Libmarpa is currently working on.
More specifically, it is the one at which new tokens will B<start>.
Since tokens are never zero length, a new token will always end after the
current earleme.
The current earleme is initially earleme 0.
Every call to C<marpa_r_earleme_complete()> advances the
current earleme by 1.

The B<furthest earleme> is the highest numbered (and therefore ``furthest'')
earleme at which a token ends.
The furthest earleme is initially earleme 0.
With every call to C<marpa_r_alternative()>, the end of the token
it adds is calculated.
A token ends at the earleme location I<current>+I<length>,
where I<current> is the current earleme,
and I<length> is the length of the newly added token.
After a call to C<marpa_r_alternative()>,
the furthest earleme is its value before the call,
or I<current>+I<length>,
whichever is greater.

The B<latest earleme> is the earleme of the latest
Earley set.
The B<latest Earley set> is the last Earley set completed.
This is always the highest numbered Earley set.
If there is an Earley set at the current earleme,
it is the latest Earley set and the latest earleme
is equal to the current earleme.
There is never an Earley set after the current earleme.

After every call to the C<marpa_r_earleme_complete()> method
that adds a token,
the value of the latest earleme is
same as the value of the current earleme.
After every call to the C<marpa_r_earleme_complete()> method
that does B<not> add a token,
the value of the latest earleme is unchanged
from its value before the call.

=head1 The significances of the earleme variables

The current earleme tracks the advance of the recognizer through the input.
Input tokens always start at the current earleme.
An application can advance past the current earleme,
by calling C<marpa_r_earleme_complete()>, which
increments the current earleme by 1.
After initialization,
C<marpa_r_earleme_complete()> is
the only way to manipulate the value of the current earleme.

The furthest earleme tracks how ``far out'' tokens can be found.
In the standard input model, calling
C<marpa_r_earleme_complete()> after each
C<marpa_r_alternative()> call is sufficient to process
all inputs,
and the furthest earleme's value
can be typically be ignored.
In alternative input models, if tokens have lengths greater than
1, calling
C<marpa_r_earleme_complete()> once after the last token
is read may not be enough to ensure that all tokens have been processed.
To ensure that all tokens have been processed,
an application must advance the current earleme
by calling C<marpa_r_earleme_complete()>,
until the current earleme is equal to the furthest earleme.

The lastest earleme is the earleme of the last Earley set.
The latest earleme is different from the current earleme if and only if
there is no Earley set at the current earleme.
A different end of parsing can be specified,
but by default, parsing is of the input
in the range
from earleme 0 to the latest earleme.

=head1 The initial earleme settings

All input models have the same initial values.
Initially the current, latest and furthest earleme
are always earleme 0.

Understanding the
settings of current, latest and furthest earleme is
crucial to working with advanced input models,
and for this reason the next sections will go
through the possibilities carefully.
The presentation will start with the most traditional
and restrictive models.
It will proceed to less restrictive models.

=head1 The standard model of input

In the standard model of input,
calls to C<marpa_r_alternative()>
and C<marpa_r_earleme_complete()> are
made in pairs.
There is, first, exactly one call
to C<marpa_r_alternative()>,
and it is for a token with length 1.
Following it must be a call
to C<marpa_r_earleme_complete()>.
For an input of length I<n>, there will be
exactly I<n> such paired calls.

Suppose, in the standard model that,
for a call
to C<marpa_r_alternative()>,
the following is true:

=over 4

=item *

The current earleme before the call was I<c>.

=back

Because this is the standard model,
this means that we also know that

=over 4

=item *

The latest earleme before the call was I<c>.

=item *

The furthest earleme before the call was I<c>.

=back

In that case,
after the call to
C<marpa_r_alternative()>,
the following will be true:

=over 4

=item *

The current earleme will still be I<c>.

=item *

The latest earleme will still be I<c>.

=item *

The furthest earleme will be I<c>+1.

=back

Suppose, in the standard model that,
for a call
to C<marpa_r_earleme_complete()>,
the following is true:

=over 4

=item *

The current earleme before the call is I<c>.
Because this is the standard model,
this means that we also know that

=item *

The latest earleme before the call was I<c>.

=item *

The furthest earleme before the call was I<c+1>.

=back

In that case,
after the call
to C<marpa_r_earleme_complete()>,
the current, latest and furthest earlemes will
be the same.
Specifically,
the following will be true:

=over 4

=item *

The current earleme will be advanced to I<c+1>.

=item *

The latest earleme will be advanced to I<c+1>.

=item *

The furthest earleme will remain at I<c+1>.

=back

=head1 Ambiguous input

As a first loosening of the standard model,
we no longer require calls to C<marpa_r_alternative()>
to be paired with calls to
C<marpa_r_earleme_complete()>.
Instead,
we allow a series of one or more calls
to C<marpa_r_alternative()>
before each call to
C<marpa_r_earleme_complete()>.
We still require that there be at least one call
to C<marpa_r_alternative()>
before each call to
C<marpa_r_earleme_complete()>,
and we still require that all tokens have
a length of 1.

In the ambiguous input model, the behavior of the current,
latest and furthest earlemes are exactly
as described for the standard model, with one minor
exception:
Where the current earleme is I<c>,
and a call to C<marpa_r_alternative()> is not the first
of a series,
the value of the furthest earleme before the call will be
I<c>+1.

=head1 Variable length tokens

Our next loosening of the restrictions is to allow
variable length tokens.
That is, instead of requiring that all tokens
be of length 1,
we allow tokens to be of length 1 or longer.
This does change the behavior of the earleme variables.

Suppose, in the variable length token model that,
for a call
to C<marpa_r_alternative()>,
the following is true:

=over 4

=item *

The current earleme before the call was I<c>.
In this model, this means that
the latest earleme before the call is also I<c>.

=item *

The furthest earleme before the call was I<old_f>.

=item *

The length of the token is I<length>.

=back

In that case,
after the call to
C<marpa_r_alternative()>,
the following will be true:

=over 4

=item *

The current and latest earlemes will still be I<c>.
The current and latest earlemes are never changed by a call
to C<marpa_r_alternative()>.

=item *

The furthest earleme will be either I<old_f> or
I<c>+I<length>, whichever was greater.

=back

Suppose, in the variable length token model that,
for a call
to C<marpa_r_earleme_complete()>,
the following is true:

=over 4

=item *

The current earleme before the call is I<c>.
In this model, this means that
the latest earleme before the call is also I<c>.

=item *

The furthest earleme before the call is I<old_f>.

=back

In that case,
after the call
to C<marpa_r_earleme_complete()>,
the following will be true:

=over 4

=item *

The current earleme will be advanced to I<c+1>.

=item *

The latest earleme will also be I<c+1>.

=item *

The furthest earleme will still be I<old_f>.
The furthest earleme is never changed by a call
to C<marpa_r_earleme_complete()>.

=back

=head1 The generalized model

To fully generalize the input model,
we now need to remove only one restriction.
We now allow empty earlemes --- earlemes with
no tokens and no Earley set.
For the generalized input model,
the effect on the earleme variables of
a call
to C<marpa_r_alternative()> is exactly
the same as it is for the variable length input model.
The effect on the earleme variables of a call to
to C<marpa_r_earleme_complete()> depends on
whether or not that call creates an empty earleme.
A call
to C<marpa_r_earleme_complete()>
creates an empty earleme if and only if
it falls into one of these two cases:

=over 4

=item *

There has been no call
to C<marpa_r_alternative()> since
recognizer initialization.

=item *

No previous call to C<marpa_r_alternative()> created
a lexeme which ends at the next earleme.
The "next earleme" is I<c+1>,
where I<c> is the current earleme.

=back

A previous call to
C<marpa_r_alternative()> created
an earleme which ends at I<lex_end>,
if

=over 4

=item *

It was called when the current earleme
was I<lex_start>.

=item *

It created a lexeme of length I<lex_len>.

=item *

I<lex_start+lex_len> is equal to
I<lex_end>.

=back

Note that the above implies the ordinary case:
If C<marpa_r_alternative()> is called
at current location I<c>,
and the lexeme it creates has the default length of 1,
then that lexeme will end at I<c+1>,
the "next earleme".

Suppose, in the generalized input model that,
for a call
to C<marpa_r_earleme_complete()>
that creates an empty earleme,
the following is true:

=over 4

=item *

The current earleme before the call is I<c>.

=item *

The latest earleme before the call is I<old_l>.

=item *

The furthest earleme before the call is I<old_f>.

=back

In that case,
after the call
to C<marpa_r_earleme_complete()>,
the following will be true:

=over 4

=item *

The current earleme will be advanced to I<c+1>.

=item *

The latest earleme will remain at I<old_l>.
This means that the latest earleme will be less than
the current earleme.

=item *

The furthest earleme will remain at I<old_f>.
The furthest earleme is never changed by a call
to C<marpa_r_earleme_complete()>.

=back

Suppose, in the generalized input model that,
for a call
to C<marpa_r_earleme_complete()>
that does not create an empty earleme,
the following is true:

=over 4

=item *

The current earleme before the call is I<c>.

=item *

The latest earleme before the call is I<old_l>.

=item *

The furthest earleme before the call is I<old_f>.

=back

In that case,
after the call
to C<marpa_r_earleme_complete()>,
the following will be true:

=over 4

=item *

The current earleme will be advanced to I<c+1>.

=item *

The latest earleme will be advanced to I<c+1>.

=item *

The furthest earleme will remain at I<old_f>.
The furthest earleme is never changed by a call
to C<marpa_r_earleme_complete()>.

=back

=head1 General rules for the earleme variables

At this point, the most generalized input model has been
introduced.
Here are some useful facts about the earleme variables that will always be the case,
no matter which of the input models is in use.

=over 4

=item *

The current earleme is always greater than
or equal to the latest earleme.

=item *

The furthest earleme is always greater than
or equal to the latest earleme.

=item *

If the furthest earleme is greater than the current earleme,
the parser is not exhausted.

=item *

If the furthest earleme is less than the current earleme,
the parser is exhausted.

=back

If the parser is not exhausted,
the following will always be true,
no matter which of the input models is in use.

=over 4

=item *

The furthest earleme is greater than
or equal to the current earleme.

=back

In an exhausted parser, the following will always be true,
no matter which of the input models is in use.

=over 4

=item *

The furthest earleme is less than
or equal to the current earleme.

=back

=head1 Copyright and License

=for Marpa::R3::Display
ignore: 1

  Copyright 2018 Jeffrey Kegler
  This file is part of Marpa::R3.  Marpa::R3 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R3 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R3.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R3::Display::End

=cut

