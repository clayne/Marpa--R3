# Marpa::R3 is Copyright (C) 2017, Jeffrey Kegler.
#
# This module is free software; you can redistribute it and/or modify it
# under the same terms as Perl 5.10.1. For more details, see the full text
# of the licenses in the directory LICENSES.
#
# This program is distributed in the hope that it will be
# useful, but it is provided "as is" and without any express
# or implied warranties. For details, see the full text of
# of the licenses in the directory LICENSES.

=head1 Name

Marpa::R3::Scanless::V - Scanless interface valuers

=head1 Synopsis

=for Marpa::R3::Display
name: Scanless valuer synopsis
partial: 1
normalize-whitespace: 1

    # TODO: Create a valuer synopsis

    my $recce = Marpa::R3::Scanless::R->new( { grammar => $grammar } );
    my $self = bless { grammar => $grammar }, 'My_Actions';
    $self->{recce} = $recce;

    if ( not defined eval { $recce->read($p_input_string); 1 }
        )
    {
        ## Add last expression found, and rethrow
        my $eval_error = $EVAL_ERROR;
        chomp $eval_error;
        die $self->show_last_expression(), "\n", $eval_error, "\n";
    } ## end if ( not defined eval { $event_count = $recce->read...})

    my $value_ref = $recce->value( $self );
    if ( not defined $value_ref ) {
        die $self->show_last_expression(), "\n",
            "No parse was found, after reading the entire input\n";
    }

=for Marpa::R3::Display::End

=for Marpa::R3::Display
name: Scanless valuer semantics
partial: 1
normalize-whitespace: 1

    package My_Actions;
    sub do_parens    { return $_[1]->[1] }
    sub do_add       { return $_[1]->[0] + $_[1]->[2] }
    sub do_subtract  { return $_[1]->[0] - $_[1]->[2] }
    sub do_multiply  { return $_[1]->[0] * $_[1]->[2] }
    sub do_divide    { return $_[1]->[0] / $_[1]->[2] }
    sub do_pow       { return $_[1]->[0]**$_[1]->[2] }
    sub do_first_arg { return $_[1]->[0] }
    sub do_script    { return join q{ }, @{$_[1]} }

=for Marpa::R3::Display::End

=head1 About this document

This page is the reference document for the valuer objects
of Marpa's SLIF (Scanless interface).

Many applications,
probably the majority,
will not need the SLIF valuer class or its methods.
Instead, they will find the 
to the L<C<< $recce->value() >> method|/value()> method
sufficent the for their needs.

The methods in this document
will be needed by applications
that wish to do one of more of the following:

=over 4

=item *

Treat an ambiguous parse as something other than an error.

=item *

Get more than one of the values from an ambiguous parse.

=item *

Set an end-of-parse location
other than the default.

=item *

Have more than one valuer active at a time.

=item *

Use one of the value-specific accessors in this document.

=back

=head1 Valuer settings

The B<valuer settings> are the named arguments
accepted by
the L<valuer's constructor|/"Constructor">
or its
L<C<set()>|/"set()"> method.

=head2 end

Most users will not need this setting.
The L<C<end>|/"end"> setting
specifies the parse end, as a G1 location.
The default is for the parse to end where the input did,
so that the parse returned is of the entire virtual input stream.
The L<C<end>|/"end"> setting is only allowed in
L<a valuer's constructor|/"Constructor">.

=head2 recce

The value of the C<recce> setting must be
a SLIF recognizer object.
The C<new()> method is required to have
a C<recognizer> setting.
The C<recognizer> setting is only allowed
by the L<C<new() method>|/"Constructor">.
Once the valuer is created, the recognizer cannot be
changed.

=head2 trace_values

The value of the C<trace_values> setting is a numeric trace level.
If the
numeric trace level is 1, Marpa prints tracing information as values
are computed in the evaluation stack.  A trace level of 0 turns
value tracing off, which is the default. Traces are written to the
trace file handle.
The C<trace_values> setting is allowed
by both
the L<valuer's constructor|/"Constructor">
and its
L<C<set()>|/"set()"> method.

=head2 trace_file_handle

The value is a file handle.
Trace output and warning messages
go to the trace file handle.
By default, the trace file handle is inherited from the
grammar.
The C<trace_file_handle> setting is allowed
by both
the L<valuer's constructor|/"Constructor">
and its
L<C<set()>|/"set()"> method.

=head1 Constructor

=for Marpa::R3::Display
name: Scanless valuer synopsis
partial: 1
normalize-whitespace: 1

    my $recce = Marpa::R3::Scanless::V->new( { recce => $recce } );

=for Marpa::R3::Display::End

The C<new()> method is the constructor for SLIF valuers.
The arguments
to the C<new()> constructor must be one or more hashes of named arguments,
where each hash key is a valuers setting.
The L<C<recce>|/"recce"> valuer setting is required.
All other valuer settings are optional.
For more on valuer settings,
see
L<the section describing them|/"Valuer settings">.

=head1 Mutators

=head2 set()

=for Marpa::R3::Display
name: SLIF valuer set() synopsis
normalize-whitespace: 1

    $recce->set( { end => 42 } );

=for Marpa::R3::Display::End

This method allows valuer settings to be changed after a SLIF
grammar is created.
The arguments to
C<set()> must be one or more hashes whose key-value pairs
are recognizer settings and their values.
The allowed valuer settings are
L<described above|/"Valuer settings">.

=head2 value()

=for Marpa::R3::Display
name: Scanless valuer synopsis
partial: 1
normalize-whitespace: 1

    my $value_ref = $recce->value( $self );

=for Marpa::R3::Display::End

The C<value> method call evaluates the next parse tree
for the valuer object,
and returns a reference to the parse result for that parse tree.
If there are no more parse trees,
the C<value> method returns C<undef>.
There are zero parse trees if there was no valid parse
of the input according to the grammar.
There will be more than one parse tree if the parse
was ambiguous.

The C<value()> method allows one optional argument.
If provided, the argument
explicitly specifies the per-parse argument for the
parse tree.
This per-parse argument can be a Perl scalar of any type,
but the most useful
type for a per-parse argument is a reference
(blessed or unblessed) to a hash or to an array.
The per-parse argument,
if provided,
will be the first argument of all
Perl semantics closures.
When data does not conveniently fit into the bottom-up
flow of parse tree evaluation,
the per-parse argument
is useful for sharing it within
the tree.
Symbol tables are one example of the kind of data which parses often
require, but which it is not convenient to accumulate bottom-up.

=head1 Accessors

=head2 ambiguity_level()

=for Marpa::R3::Display
name: Scanless valuer ambiguity_level() synopsis

    my $ambiguity_level = $valuer->ambiguity_level();

=for Marpa::R3::Display::End

Succeeds and
returns 1 if there was an unambiguous parse,
in other words if there was exactly one parse tree.
Succeeds and
returns 2 if the parse was ambiguous,
in other words if there was more than one parse tree.
Succeeds and returns 0 if there are no parse trees,
because parsing failed.
All other failures are thrown.

=head2 ambiguous()

=for Marpa::R3::Display
name: Tutorial 2 synopsis
partial: 1
normalize-whitespace: 1

    if ( my $ambiguous_status = $recce->ambiguous() ) {
        chomp $ambiguous_status;
        die "Parse is ambiguous\n", $ambiguous_status;
    }

    TODO: Move this to Scanless::V pod

=for Marpa::R3::Display::End

If there is exactly one parse, it returns the empty string.
If there is no parse, it returns a non-empty string indicating that fact.
If there are two or more parses,
it returns a non-empty string describing the ambiguity.

Applications should only test the returned string to see if it is
empty or non-empty.
The non-empty strings are intended only for reading by
humans -- their exact format is subject to change.

=head2 g1_pos

=for Marpa::R3::Display
name: Scanless valuer g1_pos() synopsis

    my $g1_pos = $valuer->g1_pos();

=for Marpa::R3::Display::End

Returns the G1 location of the end of parsing for
this valuer.

=head1 COPYRIGHT AND LICENSE

=for Marpa::R3::Display
ignore: 1

  Marpa::R3 is Copyright (C) 2017, Jeffrey Kegler.

  This module is free software; you can redistribute it and/or modify it
  under the same terms as Perl 5.10.1. For more details, see the full text
  of the licenses in the directory LICENSES.

  This program is distributed in the hope that it will be
  useful, but without any warranty; without even the implied
  warranty of merchantability or fitness for a particular purpose.

=for Marpa::R3::Display::End

=cut

# vim: expandtab shiftwidth=4:
